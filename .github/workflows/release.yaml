name: "Release"
on:
  release:
    types: [published]
  workflow_dispatch:
permissions:
  contents: read
jobs:
  build-ubuntu-extension:
    name: Building ubuntu
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Cache sqlite build
        id: cache-sqlite-build
        uses: actions/cache@v3
        with:
          path: vendor/sqlite
          key: ${{ runner.os }}-${{ hashFiles('vendor/get_sqlite.sh') }}
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        working-directory: vendor
        run: ./get_sqlite.sh
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        working-directory: vendor/sqlite
        run: ./configure && make
      - run: make loadable-release
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sqlite-vector-ubuntu
          path: dist/release/vector0.so
  build-ubuntu-python:
    runs-on: ubuntu-20.04
    needs: [build-ubuntu-extension]
    steps:
      - uses: actions/checkout@v3
      - name: Download workflow artifacts
        uses: actions/download-artifact@v3
        with:
          name: sqlite-vector-ubuntu
          path: dist/debug/
      - uses: actions/setup-python@v3
      - run: pip install wheel
      - run: make python-release
      - run: make datasette-release
      - uses: actions/upload-artifact@v3
        with:
          name: sqlite-vector-ubuntu-wheels
          path: dist/debug/wheels/*.whl
  build-macos-extension:
    name: Building macos-latest
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Cache sqlite build
        id: cache-sqlite-build
        uses: actions/cache@v3
        with:
          path: vendor/sqlite
          key: ${{ runner.os }}-${{ hashFiles('vendor/get_sqlite.sh') }}
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        working-directory: vendor
        run: ./get_sqlite.sh
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        working-directory: vendor/sqlite
        run: ./configure && make
      - run: make loadable-release
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sqlite-vector-macos
          path: dist/release/vector0.dylib
  build-macos-python:
    runs-on: macos-latest
    needs: [build-macos-extension]
    steps:
      - uses: actions/checkout@v3
      - name: Download workflow artifacts
        uses: actions/download-artifact@v3
        with:
          name: sqlite-vector-macos
          path: dist/debug/
      - uses: actions/setup-python@v3
      - run: pip install wheel
      - run: make python-release
      - run: make datasette-release
      - uses: actions/upload-artifact@v3
        with:
          name: sqlite-vector-macos-wheels
          path: dist/debug/wheels/*.whl
  upload-release-assets:
    name: Upload release assets
    needs:
      [
        build-macos-extension,
        build-ubuntu-extension,
      ]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download workflow artifacts
        uses: actions/download-artifact@v2
      - run: npm install tar-fs
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('.github/workflows/upload.js')
            await script({github, context})
  upload_pypi:
    needs:
      [
        build-ubuntu-python,
        build-macos-python,
      ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: sqlite-vector-ubuntu-wheels
          path: dist
      - uses: actions/download-artifact@v3
        with:
          name: sqlite-vector-macos-wheels
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true